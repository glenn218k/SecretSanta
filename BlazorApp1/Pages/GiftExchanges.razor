@page "/"
@inject HttpClient Http

<PageTitle>Secret Santas</PageTitle>

<style>
    body{
        background-color: palegreen;
        font-family: 'Comic Sans MS';
        overflow: auto;
    }

    .buttonClassOdd {
        background-color: red;
        color: darkgreen;
    }

    .buttonClassEven {
        background-color: darkgreen;
        color: red;
    }

    .buttonClassOdd:hover {
        background-color: yellow;
        color: black;
    }

    .buttonClassEven:hover {
        background-color: yellow;
        color: black;
    }
</style>

@if (_historicalGiftExchanges is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Secret Santas by Year</h1>

    @foreach (var giftExchangeYear in _historicalGiftExchanges.OrderByDescending(d => d.Key))
    {
        <button class="@ButtonClass(_historicalGiftExchangeDisplayCount++)" @onclick="@(() => HistoricalGiftExchangesOnClickHandler(giftExchangeYear.Value))">
            @giftExchangeYear.Key
        </button>
    }

    <GiftExchangeDetail GiftExchange=@_selectedGiftExchange></GiftExchangeDetail>
}

@if (_historicalParticipants is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <br />
    <br />
    <br />
    <h1>Secret Santas by Giver</h1>

    @foreach (var participant in _historicalParticipants.Where(p => !p.Key.Obsolete).OrderBy(d => d.Key.Name))
    {
        <button class="@ButtonClass(@_historicalParticipantDisplayCount++)" @onclick="@(() => HistoricalParticipantsOnClickHandler(participant))">
            @participant.Key.Name
        </button>
    }

    <HistoricalParticipantDetail Participants=@_participants Participant=@_selectedParticipant></HistoricalParticipantDetail>
}

@code {
    private int _historicalGiftExchangeDisplayCount = 0;
    private int _historicalParticipantDisplayCount = 0;
    private List<GiftExchangeModel> _giftExchanges = [];
    private List<ParticipantModel> _participants = [];
    private List<ParticipantModel> _availableSignificantOthers = [];
    private List<int> _availableGiftExchangeYears = [];
    private Dictionary<int, HistoricalGiftExchange> _historicalGiftExchanges = new Dictionary<int, HistoricalGiftExchange>();
    private Dictionary<ParticipantModel, List<GiftExchangeModel>> _historicalParticipants = new Dictionary<ParticipantModel, List<GiftExchangeModel>>();

    private HistoricalGiftExchange? _selectedGiftExchange;
    private KeyValuePair<ParticipantModel, List<GiftExchangeModel>> _selectedParticipant;

    private string ButtonClass(int i)
    {
        if (i % 2 == 0)
        {
            return "buttonClassEven";
        }

        return "buttonClassOdd";
    }

    private void HistoricalGiftExchangesOnClickHandler(HistoricalGiftExchange historicalGiftExchange)
    {
        _selectedGiftExchange = historicalGiftExchange;
    }

    private void HistoricalParticipantsOnClickHandler(KeyValuePair<ParticipantModel, List<GiftExchangeModel>> historicalParticipant)
    {
        _selectedParticipant = historicalParticipant;
    }

    protected override async Task OnInitializedAsync()
    {
        _historicalGiftExchangeDisplayCount = 0;
        _historicalParticipantDisplayCount = 0;
        await Init();
    }

    private async Task Init()
    {
        _availableSignificantOthers.Clear();
        _giftExchanges.Clear();
        _participants.Clear();
        _historicalGiftExchanges.Clear();
        _historicalParticipants.Clear();

        _availableSignificantOthers = [new ParticipantModel()];
        var randomid = Guid.NewGuid().ToString();
        var secretSantaData = await Http.GetFromJsonAsync<SecretSantaData>($"sample-data/secretSantaData.json?{randomid}");

        if (secretSantaData is null)
        {
            return;
        }

        _giftExchanges = secretSantaData.GiftExchanges?.ToList() ?? [];

        _participants = secretSantaData.Participants?.ToList() ?? [];
        _availableSignificantOthers.AddRange(_participants);

        foreach (var g in _giftExchanges)
        {
            if (!_historicalGiftExchanges.ContainsKey(g.Year))
            {
                _availableGiftExchangeYears.Add(g.Year);
                _historicalGiftExchanges.Add(g.Year, new() { Year = g.Year });
            }

            var giver = _participants.FirstOrDefault(p => p.Id == g.GiverId);
            var receiver = _participants.FirstOrDefault(p => p.Id == g.ReceiverId);
            _historicalGiftExchanges[g.Year].GiftExchangeData.Add(new() { Year = g.Year, GiverId = g.GiverId, GiverName = giver?.Name, ReceiverId = g.ReceiverId, ReceiverName = receiver?.Name, ReceiverAmazonLink = receiver?.AmazonLink, Skipped = g.Skipped, SkippedReason = g.SkippedReason });
        }

        foreach (var p in _participants)
        {
            if (!_historicalParticipants.ContainsKey(p))
            {
                _historicalParticipants.Add(p, []);
            }

            _historicalParticipants[p].AddRange(_giftExchanges.Where(g => g.GiverId == p.Id).ToList());
        }

        _historicalGiftExchanges = _historicalGiftExchanges.OrderByDescending(g => g.Key).ToDictionary();

        _selectedGiftExchange = _historicalGiftExchanges.FirstOrDefault().Value;
    }

    public class SecretSantaData
    {
        public GiftExchangeModel[]? GiftExchanges { get; set; }
        public ParticipantModel[]? Participants { get; set; }
    }

    public class GiftExchangeModel
    {
        public int Year { get; set; }
        public Guid GiverId { get; set; }
        public Guid ReceiverId { get; set; }

        public bool Skipped { get; set; }

        public string? SkippedReason { get; set; }

        public override string ToString()
        {
            string message;
            if (Skipped)
            {
                message = string.IsNullOrWhiteSpace(SkippedReason) ? "Skipped" : SkippedReason;
            }
            else
            {
                message = $"{Year}, {GiverId}, {ReceiverId}";
            }

            return message;
        }
    }

    public class ParticipantModel : IEquatable<ParticipantModel>
    {
        public Guid Id { get; set; }
        public string? Name { get; set; }
        public Guid? SignificantOtherId { get; set; }
        public bool Obsolete { get; set; }
        public string? AmazonLink { get; set; }

        public bool Equals(ParticipantModel? other)
        {
            if (other is null)
            {
                return false;
            }
            else if (Id == other.Id)
            {
                return true;
            }

            return false;
        }

        public override string ToString()
        {
            return $"{Id}, {Name}, {SignificantOtherId}, {Obsolete}, {AmazonLink}";
        }
    }

    public class DisplayData
    {
        public int Year { get; set; }
        public Guid GiverId { get; set; }
        public string? GiverName { get; set; }
        public Guid ReceiverId { get; set; }
        public string? ReceiverName { get; set; }
        public string? ReceiverAmazonLink { get; set; }
        public bool Skipped { get; set; }
        public string? SkippedReason { get; set; }
    }

    public class HistoricalGiftExchange
    {
        public int Year { get; set; }

        public List<DisplayData> GiftExchangeData { get; set; } = [];
    }
}