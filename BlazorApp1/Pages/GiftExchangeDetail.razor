@using static BlazorApp1.Pages.GiftExchanges

@if (GiftExchange != null)
{
    <h1>@_currentYear</h1>

    int i = 0;
    if (!_isPast)
    {
        @foreach (var s in _displayStringsForEveryone)
        {
            <h2 style="color:@TextColor(i++)">@((MarkupString)@s)</h2>
        }
    }

    @foreach (var s in _displayStrings)
    {
        <h2 style="color:@TextColor(i++)">@((MarkupString)@s)</h2>
    }
}
@code {
    [Parameter]
    public HistoricalGiftExchange? GiftExchange { get; set; }

    [Parameter]
    public List<ParticipantModel>? ForEveryoneParticipants { get; set; }

    private static readonly string _emptyString = string.Empty;
    private DateTime _currentDateTime = DateTime.UtcNow;
    private List<string> _displayStrings = [];
    private List<string> _displayStringsForEveryone = [];
    private int _currentYear;
    private int _howManySeparatorsNeeded;
    private bool _isPast;

    private string TextColor(int i)
    {
        if (i % 2 == 0)
        {
            return "red";
        }

        return "darkgreen";
    }

    protected async override Task OnParametersSetAsync()
    {
        _currentDateTime = DateTime.UtcNow;

        if (GiftExchange?.Year is int year
            && _currentYear != year)
        {
            var exchangeDate = new DateTime(year, 12, 25, 0, 0, 0, DateTimeKind.Utc);
            _isPast = exchangeDate < _currentDateTime;

            await UpdateDisplay([.. GiftExchange.GiftExchangeData]);
            _currentYear = year;
        }

        if (ForEveryoneParticipants is List<ParticipantModel> forEveryoneParticipants)
        {
            _displayStringsForEveryone.Clear();

            foreach(var participant in forEveryoneParticipants.OrderBy(p => p.Name))
            {
                var amazonLink = string.Empty;
                if (!string.IsNullOrWhiteSpace(participant.AmazonLink))
                {
                    amazonLink = $" | <a href=\"{participant.AmazonLink}\" target=\"_blank\" rel=\"noopener noreferrer\">{participant.Name}'s Amazon Wishlist</a>";
                }

                _displayStringsForEveryone.Add($"Everyone has {participant.Name}{amazonLink}");
            }
        }
    }

    private static int DetermineCycleCount(IList<DisplayData> giftExchanges)
    {
        var retVal = 0;
        var giverId = giftExchanges[0].GiverId;

        while (true)
        {
            var exchange = giftExchanges.FirstOrDefault(e => e.GiverId == giverId);

            if (exchange is null)
            {
                retVal++;

                if (!giftExchanges.Any())
                {
                    break;
                }

                exchange = giftExchanges.First();
            }

            giftExchanges.Remove(exchange);

            giverId = exchange.ReceiverId;
        }

        return retVal;
    }

    private Task UpdateDisplay(IList<DisplayData> giftExchanges)
    {
        _displayStrings.Clear();
        _howManySeparatorsNeeded = DetermineCycleCount([.. giftExchanges]) - 1;

        var exchanges = giftExchanges.ToList();

        var firstExchange = exchanges.OrderBy(e => e.GiverName).FirstOrDefault();

        if (firstExchange is null)
        {
            return Task.CompletedTask;
        }
        else if (firstExchange.Skipped)
        {
            _displayStrings.Add(string.IsNullOrWhiteSpace(firstExchange.SkippedReason) ? "Skipped: Reason Unknown" : firstExchange.SkippedReason);

            return Task.CompletedTask;
        }

        var giverId = firstExchange.GiverId;
        var giverName = firstExchange.GiverName;

        while (true)
        {
            var exchange = exchanges.FirstOrDefault(e => e.GiverId == giverId);

            if (exchange is null)
            {
                if (!exchanges.Any())
                {
                    return Task.CompletedTask;
                }

                exchange = exchanges.First();

                _displayStrings.Add("---------------------------");
            }

            exchanges.Remove(exchange);
            giverId = exchange.ReceiverId;

            var midWord = _isPast ? "had" : "has";
            var amazonLink = string.Empty;

            if (!_isPast && !string.IsNullOrWhiteSpace(exchange.ReceiverAmazonLink))
            {
                amazonLink = $" | <a href=\"{exchange.ReceiverAmazonLink}\" target=\"_blank\" rel=\"noopener noreferrer\">{exchange.ReceiverName}'s Amazon Wishlist</a>";
            }
            
            _displayStrings.Add($"{exchange.GiverName} {midWord} {exchange.ReceiverName}{amazonLink}");
        }
    }
}